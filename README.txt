Maths Application
=================

The solution will start both MathsApp ( Calculation Service ) and MathsAppClient ( Very simple client ) at the same time.

To test the Web API service directly:

http://localhost:5000/api/maths/?expr=10-10
http://localhost:5000/api/maths/?expr=10%2b10
http://localhost:5000/api/maths/?expr=10/10
http://localhost:5000/api/maths/?expr=10*10

These will all return a simple string result.

If an invalid calculation is submitted e.g.

http://localhost:5000/api/maths/?expr=10x10

You will see a helpful error message:

MathsApp Error: Calculation Error: value not a valid decimal number: x, invoked Fallback Service: Error: Undefined symbol x

Where possible it will indicate the error that needs correcting.

By default the service will NOT apply BODMAS rules e.g.

http://localhost:5000/api/maths/?expr=2%2b2*2

returns 8

To enable BODMAS rules apply the additional parameter as follows:

http://localhost:5000/api/maths/?expr=2%2b2*2&useBODMAS=true

The service now correctly returns 6

To try the BODMAS pre processor which calculates multiplication and division first you can call it directly like this:

http://localhost:5000/api/maths/CalculateBODMAS?expr=2%2b2*2

This will return the calculations with multiple and division completed.

e.g.

2+4

When the service generates an error additional exception information will be written to the log file /Logs/Log-20210301.txt

When an error occurs the calculation will be passed to the fallback service to attempt to gain a result.  A good way to test this is to overflow the .Net Decimal type with the following request:

http://localhost:5000/api/maths/?expr=79228162514264337593543950335%2b9999

returns

7.922816251426434e+28

The error generated by the Calculate service is written to the log and the expression is passed to the mathsjs.org service.

This can be configured by modification of the settings in the appsettings.json file.

